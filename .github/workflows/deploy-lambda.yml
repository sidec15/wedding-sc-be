name: Deploy Specific Lambda to AWS

on:
  workflow_dispatch:
    inputs:
      lambda:
        description: "Lambda workspace folder under lambdas/ (e.g. email-dispatcher)"
        required: true
      lambda_name:
        description: "AWS Lambda function name"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Install only the two workspaces we need; avoid symlinks so node_modules can be zipped for Lambda.
      - name: 📦 Install common + target lambda (no symlinks)
        run: |
          npm ci --include-workspace-root=false \
            --workspace common \
            --workspace lambdas/${{ github.event.inputs.lambda }} \
            --install-links=false

      # Build common first (emits dist/ via tsc -b)
      - name: 🛠 Build common
        run: npm run -w common build

      # Build the selected lambda (tsc in that workspace)
      - name: 🛠 Build Lambda
        run: npm run -w lambdas/${{ github.event.inputs.lambda }} build

      # Sanity checks (optional but helpful)
      - name: ✅ Verify artifacts
        run: |
          test -n "$(find common/dist -name '*.d.ts' -print -quit)" || (echo "❌ No type declarations emitted by @wedding/common" && exit 1)
          test -f "lambdas/${{ github.event.inputs.lambda }}/dist/handler.js" || (echo "❌ dist/handler.js missing" && exit 1)

      # Prune dev deps inside the lambda workspace so the zip is lean
      - name: 🧹 Prune dev deps in Lambda
        run: npm prune -w lambdas/${{ github.event.inputs.lambda }} --omit=dev

      # Use the lambda's own zip script and move the artifact to the repo root
      - name: 📦 Package Lambda
        run: |
          npm run -w lambdas/${{ github.event.inputs.lambda }} zip
          mv "lambdas/${{ github.event.inputs.lambda }}/lambda.zip" ./lambda.zip

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name "${{ github.event.inputs.lambda_name }}" \
            --zip-file fileb://lambda.zip
