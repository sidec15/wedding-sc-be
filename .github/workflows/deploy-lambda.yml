name: Deploy Lambda

on:
  workflow_dispatch:
    inputs:
      lambda_folder:
        description: "Folder under lambdas/ (e.g. email-dispatcher)"
        required: true
        type: string
      lambda_name:
        description: "AWS Lambda function name"
        required: true
        type: string
      aws_region:
        description: "AWS region"
        default: "eu-central-1"
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ github.event.inputs.aws_region }}
      NODE_VERSION: 20.x

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies (root + workspaces)
        run: npm ci

      - name: Build common and lambda
        run: |
          npm run build:common
          npx tsc -b lambdas/${{ inputs.lambda_folder }}

      - name: Pack common as tarball
        id: pack_common
        run: |
          TARBALL=$(npm pack ./common)
          echo "TARBALL=$TARBALL" >> $GITHUB_ENV

      - name: Install prod deps in lambda folder
        working-directory: lambdas/${{ inputs.lambda_folder }}
        run: |
          rm -rf node_modules
          npm ci --omit=dev
          npm install --omit=dev ../../${TARBALL}

      - name: Zip lambda
        working-directory: lambdas/${{ inputs.lambda_folder }}
        run: |
          zip -r function.zip dist node_modules package.json .env -x "**/*.map" || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambda
        working-directory: lambdas/${{ inputs.lambda_folder }}
        run: |
          aws lambda update-function-code \
            --function-name "${{ inputs.lambda_name }}" \
            --zip-file "fileb://function.zip" \
            --publish
