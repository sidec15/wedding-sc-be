name: Deploy Specific Lambda to AWS

on:
  workflow_dispatch:
    inputs:
      lambda:
        description: "Lambda workspace folder under lambdas/ (e.g. email-dispatcher)"
        required: true
      lambda_name:
        description: "AWS Lambda function name"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 1) Install only what's needed to build the common workspace (dev deps included)
      - name: 📦 Install deps for common (to build dist)
        run: |
          npm ci --include-workspace-root=false --workspace common

      # 2) Build common so dist/ exists BEFORE we copy it into the lambda's node_modules
      - name: 🛠 Build common
        run: npm run -w common build

      # 3) Install the target lambda (dev deps included) with real copies (no symlinks).
      #    This copies @wedding/common (now with built dist/) into the lambda's node_modules.
      - name: 📦 Install lambda workspace (no symlinks)
        run: |
          npm ci --include-workspace-root=false \
            --workspace lambdas/${{ github.event.inputs.lambda }} \
            --install-links=false

      # 4) Build the lambda (uses its local dev deps)
      - name: 🛠 Build Lambda
        run: npm run -w lambdas/${{ github.event.inputs.lambda }} build

      # Optional: ensure common actually emitted at least one .d.ts (sanity check)
      - name: 🔎 Verify common types emitted
        run: |
          test -n "$(find common/dist -name '*.d.ts' -print -quit)" || (echo "❌ No type declarations emitted by @wedding/common" && exit 1)

      # 5) Prune dev deps INSIDE the lambda workspace to slim the package
      - name: 🧹 Prune dev deps in Lambda
        run: npm prune -w lambdas/${{ github.event.inputs.lambda }} --omit=dev

      # 6) Package using the lambda's own npm script, then move the zip to repo root for upload
      - name: 📦 Package Lambda
        run: |
          npm run -w lambdas/${{ github.event.inputs.lambda }} zip
          mv lambdas/${{ github.event.inputs.lambda }}/lambda.zip ./lambda.zip

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name "${{ github.event.inputs.lambda_name }}" \
            --zip-file fileb://lambda.zip
