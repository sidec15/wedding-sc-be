name: Deploy Specific Lambda to AWS

on:
  workflow_dispatch:
    inputs:
      lambda:
        description: "Lambda workspace folder under lambdas/ (e.g. email-dispatcher)"
        required: true
      lambda_name:
        description: "AWS Lambda function name"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Build common so dist/ exists for the tarball
      - name: 📦 Install + build common
        run: |
          npm ci --include-workspace-root=false --workspace common
          npm run -w common build
          test -f common/dist/index.js || (echo "❌ common dist missing" && exit 1)

      # Pack common and capture the tarball name safely
      - name: 🧶 Pack common to tarball
        id: pack_common
        run: |
          cd common
          TARBALL="$(npm pack --silent)"
          echo "tarball_name=$TARBALL" >> "$GITHUB_OUTPUT"
          echo "Packed: $TARBALL"
          ls -la "$TARBALL"

      # Install lambda deps, then install the packed common via a FILE path
      - name: 📦 Install lambda deps + common tarball
        run: |
          npm ci --include-workspace-root=false --workspace "lambdas/${{ github.event.inputs.lambda }}"
          npm i --no-save -w "lambdas/${{ github.event.inputs.lambda }}" "./common/${{ steps.pack_common.outputs.tarball_name }}"

      # Build the lambda
      - name: 🛠 Build Lambda
        run: npm run -w "lambdas/${{ github.event.inputs.lambda }}" build

      # Sanity checks (ensure common + winston are in the lambda zip tree)
      - name: ✅ Verify artifacts
        run: |
          test -f "lambdas/${{ github.event.inputs.lambda }}/node_modules/@wedding/common/dist/index.js" || (echo "❌ @wedding/common dist missing in lambda" && exit 1)
          test -f "lambdas/${{ github.event.inputs.lambda }}/node_modules/winston/package.json" || (echo "❌ winston not installed in lambda" && exit 1)
          test -f "lambdas/${{ github.event.inputs.lambda }}/dist/handler.js" || (echo "❌ lambda dist/handler.js missing" && exit 1)

      # Prune dev deps inside the lambda
      - name: 🧹 Prune dev deps in Lambda
        run: npm prune -w "lambdas/${{ github.event.inputs.lambda }}" --omit=dev

      # Zip using the lambda's own script; move to repo root for upload
      - name: 📦 Package Lambda
        run: |
          npm run -w "lambdas/${{ github.event.inputs.lambda }}" zip
          mv "lambdas/${{ github.event.inputs.lambda }}/lambda.zip" ./lambda.zip

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name "${{ github.event.inputs.lambda_name }}" \
            --zip-file fileb://lambda.zip
